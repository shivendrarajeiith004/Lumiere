%{
#include<stdio.h>
#include<stdlib.h>
void yyerror(char *);
int yylex();
extern FILE* yyin;
extern int yylineno;
int lineno;
FILE * inputFile;
FILE* outputFile;
// int curr_scope = -1;
// std::map<int , SymbolTableVar> blockList;
// SymbolTableVar * curr_symb_table;
%}

%token VALUE ASSIGN_OPERATOR RESERVED_TYPE RESERVED_KEYWORD SEMICOLON INCLUDE INT LIBRARY 
%token FUNCTION CONSOLE  STRING CONNECT_TO RETURN
%token COMMENT IDENTIFIER COMMA JOIN_OPERATOR HASH LESS_THAN GREATER_THAN LEFT_PARENT RIGHT_PARENT 
%token LEFT_BRACE RIGHT_BRACE LEFT_CURLY_BRACE RIGHT_CURLY_BRACE AND_OPERATOR OR_OPERATOR NOT_OPERATOR
%token ADD_OPERATOR SUB_OPERATOR MULT_OPERATOR DIV_OPERATOR CMPD_ADD_OPERATOR CMPD_SUB_OPERATOR 
%token CMPD_MULT_OPERATOR CMPD_DIV_OPERATOR EQUAL_OPERATOR NOT_EQUAL_OPERATOR GE_OPERATOR LE_OPERATOR
%token IF ELSE ELSE_IF
%left OR_OPERATOR
%left AND_OPERATOR
%left EQUAL_OPERATOR NOT_EQUAL_OPERATOR
%left GREATER_THAN LESS_THAN GE_OPERATOR LE_OPERATOR
%left ADD_OPERATOR SUB_OPERATOR
%left MULT_OPERATOR DIV_OPERATOR
%right POW_OPERATOR
%right NOT_OPERATOR
%%
CMPD_STATEMENTS : STATEMENT CMPD_STATEMENTS 
                | 
                ;
STATEMENT : INCLUDE_TYPE_STATEMENT 
          | MAIN_FUNCTION_STATMENT
          | COMMENTS
          | CONNECT_TO_FUNCTION_STATEMENT
          | RESERVED_TYPE_DECLARATION
          | CONSOLE_STATEMENT
          |CONDITIONAL_STATEMENT
          | MAIN_FNCTN_RETURN_STATEMENT
          ;

COMMENTS : COMMENT {fprintf(outputFile,"lineno: %d :: {COMMENTS}\n", yylineno); };

MAIN_FNCTN_RETURN_STATEMENT : RETURN VALUE SEMICOLON {fprintf(outputFile,"lineno: %d :: {MAIN_FNCTN_RETURN_STATEMENT}\n", yylineno);};
CONSOLE_STATEMENT : CONSOLE LEFT_PARENT STRING RIGHT_PARENT SEMICOLON {fprintf(outputFile,"lineno: %d :: {CONSOLE STATEMENT}\n", yylineno);};

INCLUDE_TYPE_STATEMENT : HASH INCLUDE LESS_THAN LIBRARY GREATER_THAN  {fprintf(outputFile,"lineno: %d :: {INCLUDE_TYPE_STATEMENT}\n", yylineno); };
                       ;
MAIN_FUNCTION_STATMENT : INT FUNCTION LEFT_PARENT RIGHT_PARENT LEFT_CURLY_BRACE CMPD_STATEMENTS RIGHT_CURLY_BRACE {fprintf(outputFile,"lineno: %d :: {MAIN_FUNCTION_STATEMENT}\n", yylineno); };

CONNECT_TO_FUNCTION_STATEMENT : IDENTIFIER JOIN_OPERATOR CONNECT_TO LEFT_PARENT IDENTIFIER RIGHT_PARENT SEMICOLON {fprintf(outputFile,"lineno: %d :: {CONNECT_TO_FUNCTION_STATEMENT}\n", yylineno);};

RESERVED_TYPE_DECLARATION : RESERVED_TYPE RESERVED_TYPE_STATEMENTS SEMICOLON {fprintf(outputFile,"lineno: %d :: {RESERVED_TYPE_DECLARATIONS}\n", yylineno); };

RESERVED_TYPE_STATEMENTS : RESERVED_TYPE_STATEMENT COMMA RESERVED_TYPE_STATEMENTS
                         | RESERVED_TYPE_STATEMENT
                         ;

RESERVED_TYPE_STATEMENT : IDENTIFIER | /*SIMPLE_ASSIGNMENT | */COMPLEX_ASSIGNMENT ;

COMPLEX_ASSIGNMENT : IDENTIFIER CMPD_OPERATOR EXPRESSION {fprintf(outputFile,"lineno: %d :: {RESERVED_TYPE_DECLARATION} :: {COMPLEX_ASSIGNMENT}\n", yylineno);}; 


/*ARITHMETIC_EXPRESSIONS : ARITHMETIC_EXPRESSION SEMICOLON*/

EXPRESSION:BOOLEAN_EXP
ARITHMETIC_EXPRESSION : ARITHMETIC_EXPRESSION ADD_OPERATOR  MUL_EXP  
               | ARITHMETIC_EXPRESSION SUB_OPERATOR MUL_EXP 
               | MUL_EXP 
	            ;

MUL_EXP : MUL_EXP MULT_OPERATOR  POW_EXP 
        | MUL_EXP DIV_OPERATOR POW_EXP
        | POW_EXP  
        ;

POW_EXP : POW_EXP POW_OPERATOR UNARY_EXPRESSION 
        | UNARY_EXPRESSION 
        ;
UNARY_EXPRESSION : ADD_OPERATOR  UNARY_EXPRESSION 
                 | NOT_OPERATOR UNARY_EXPRESSION
                 | SUB_OPERATOR UNARY_EXPRESSION  
                 | PRIMARY_EXP  
                 ;
PRIMARY_EXP  : LEFT_PARENT EXPRESSION RIGHT_PARENT  
             | FACTOR 
             ; 
BOOLEAN_EXP : BOOLEAN_EXP AND_OPERATOR RELATIONAL_EXP 
            | BOOLEAN_EXP OR_OPERATOR RELATIONAL_EXP
            | RELATIONAL_EXP 
            ;
RELATIONAL_EXP : RELATIONAL_EXP GREATER_THAN ARITHMETIC_EXPRESSION 
               | RELATIONAL_EXP GE_OPERATOR ARITHMETIC_EXPRESSION 
               | RELATIONAL_EXP LESS_THAN ARITHMETIC_EXPRESSION
               | RELATIONAL_EXP LE_OPERATOR ARITHMETIC_EXPRESSION 
               | RELATIONAL_EXP EQUAL_OPERATOR ARITHMETIC_EXPRESSION
               | RELATIONAL_EXP NOT_EQUAL_OPERATOR ARITHMETIC_EXPRESSION
               | ARITHMETIC_EXPRESSION  
              ;
FACTOR : VALUE | IDENTIFIER ;
CMPD_OPERATOR : CMPD_ADD_OPERATOR | CMPD_DIV_OPERATOR | CMPD_SUB_OPERATOR |CMPD_MULT_OPERATOR | ASSIGN_OPERATOR;

CONDITIONAL_STATEMENT: IF_STATEMENT {fprintf(outputFile,"lineno: %d :: IF STATEMENT Detected!!!!\n",yylineno);}
                     | IF_STATEMENT ELSE_STATEMENT {fprintf(outputFile,"lineno: %d :: ELSE STATEMENT Detected!!!!\n",yylineno);}
                     | IF_STATEMENT ELSEIF_STATEMENT_LIST ELSE_STATEMENT {fprintf(outputFile,"lineno: %d :: ELSE IF STATEMENT Detected!!!!\n",yylineno);};
/* STATEMENTS */
IF_STATEMENT:IF LEFT_PARENT BOOLEAN_EXP RIGHT_PARENT LEFT_CURLY_BRACE CMPD_STATEMENTS RIGHT_CURLY_BRACE ;

ELSE_STATEMENT: ELSE LEFT_CURLY_BRACE CMPD_STATEMENTS RIGHT_CURLY_BRACE;
ELSEIF_STATEMENT_LIST: ELSEIF_STATEMENT ELSEIF_STATEMENT_LIST | ELSEIF_STATEMENT;
ELSEIF_STATEMENT: ELSE_IF LEFT_PARENT BOOLEAN_EXP RIGHT_PARENT LEFT_CURLY_BRACE CMPD_STATEMENTS RIGHT_CURLY_BRACE;
%%

void yyerror(char* s){
    fprintf(outputFile,"lineno: %d :: Syntax Error Detected!!!!\n",yylineno);
    return;
}

int main(int argc, char** argv){
    inputFile = fopen(argv[1], "r");
    outputFile = fopen(argv[2], "w");
    yyin = inputFile;
    //lineno = yylineno;
    yyparse();
    fclose(inputFile);
    fclose(outputFile);
    return 0;
}
