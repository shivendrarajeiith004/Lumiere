#include<library>                                   : include-type-statement
int function(){many statements in here}             : main-function-statement
/*No need for any function calls*/                  : comments
mass m1 = 67, m2,m3;                                : reserved_type declaration/assignment statements
body b1;                                            : reserved_type declaration statement
m3.connectTo(b1);                                   : connectTo function type
variable b = mass;                                  : variable type declaration/assignment statement
b += 3;                                             : arithmetic expression
if(b > c && d == e){                                : if-else statement and binary operator statments 
        get_final_vel_at_time(4);                   : inbuilt_function_call statments;
    } else{                                         : else if statments
        get_final_vel_at_time(3);                   : inbuilt_function_call statements;
    }                                               : else statement
console("printing output");                         : console statments
return 0;                                           : main_fnctn_return_statement    


reserved_type_declaration : reserved_type reserved_type_statement's;
reserved_type_statement's : reserved_type_statement  , reserved_type_statement's
                          | reserved_type_statement
                          ;
                        
reserved_type_statement : simple_assignment | complex_expression | identifier;

simple_assignment :
complex_expression :
identifier : identifier;
                    
Required Logic for :
    boolean expression only with && and || and != and == operator 
Example structure :
               ((a && b) || (b || c)) != ((a != b)!= (b == c))

    boolean_exp_list : boolean_exp boolean_exp_list
                     | '(' boolean_exp boolean_exp_list ')'
                     | '(' boolean_exp ')'
                     | boolean_exp;
                     ;

    boolean_exp      : identifier '&&' bool_eq_neq_op_exp 
                     | identifier '||' bool_eq_neq_op_exp
                     | bool_eq_neq_op_exp
    bool_eq_neq_op_exp : single_bool_exp
                       | bool_eq_neq_op_exp '==' single_bool_exp
                       | bool_eq_neq_op_exp '!=' single_bool_exp
    single_bool_exp : identifier 
                    |
                    ;  
Required Logic For Arithmetic Expression :
    <expression> ::= <term>
    <expression> ::= <expression> + <term>
    <expression> ::= <expression> - <term>
    <term> ::= <factor>
    <term> ::= <term> * <factor>
    <term> ::= <term> / <factor>
    <factor> ::= <non-negative integer>
    <factor> ::= - <factor>
    <factor> ::= ( <expression> )


EXPRESSION : BOOLEAN_EXP  {printf("Relations here\n");}
           ;
ARITHMETIC_EXP : ARITHMETIC_EXP ADD_OP  MUL_EXP  {printf("ARITHMETIC_EXP");}
               | ARITHMETIC_EXP SUB_OP MUL_EXP 
               | MUL_EXP 
	            ;

MUL_EXP : MUL_EXP MULT_OP  POW_EXP 
        | MUL_EXP DIV_OP POW_EXP
        | POW_EXP  
        ;

POW_EXP : POW_EXP POW_OP CAST_EXP 
        | CAST_EXP 
        ;

CAST_EXP : LEFT_PAREN TYPE RIGHT_PAREN CAST_EXP  
         | UNARY_EXPRESSION
         ;
UNARY_EXPRESSION : ADD_OP  UNARY_EXPRESSION 
                 | NOT_OP UNARY_EXPRESSION
                 | SUB_OP UNARY_EXPRESSION  
                 | PRIMARY_EXP  
                 ;
PRIMARY_EXP  : LEFT_PAREN EXPRESSION RIGHT_PAREN 
             | FACTOR 
             ; 
BOOLEAN_EXP : BOOLEAN_EXP AND_OP RELATIONAL_EXP {}
            | BOOLEAN_EXP OR_OP RELATIONAL_EXP
            | RELATIONAL_EXP 
            ;
RELATIONAL_EXP : RELATIONAL_EXP GREAT_THAN ARITHMETIC_EXP 
               | RELATIONAL_EXP GREAT_THAN_EQ ARITHMETIC_EXP 
               | RELATIONAL_EXP LESS_THAN ARITHMETIC_EXP
               | RELATIONAL_EXP LESS_THAN_EQ ARITHMETIC_EXP 
               | RELATIONAL_EXP EQUAL_TO ARITHMETIC_EXP
               | RELATIONAL_EXP NOT_EQUAL_TO ARITHMETIC_EXP
               | ARITHMETIC_EXP  
              ;
FACTOR :  VAR 
       | CONSTANT
       ;
